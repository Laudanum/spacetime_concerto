<?php
/*
  Create templates for views created by my_entries module.
  views-view-fields--my-entries.tpl.php
*/

/**
 * Implements hook_menu().
 * Override path to `previous entries` with one to our own view. node/1/submissions
 * Override path to `confirmation` page. node/1/done?sid=4
 */
function spacetime_concerto_payment_menu() {  
  $entry_form_nid = 1;
  $items['node/' . $entry_form_nid . '/submissions'] = array(
//    'page callback' => 'drupal_goto',
    'page callback' => 'spacetime_concerto_payment_my_entries',
//    'page arguments' => array('user/%spacetime_concerto_payment_user_uid/entries'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['node/' . $entry_form_nid . '/done'] = array(
//    'page callback' => 'drupal_goto',
    'page callback' => 'spacetime_concerto_payment_my_entries',
//    'page arguments' => array('user/%spacetime_concerto_payment_user_uid/entries'),
//    'page arguments' => array('_spacetime_concerto_payment_my_entries_path', array()),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/*
  Callback for hook_menu - redirect to user/[uid]/entries ( defined by view).
*/
function spacetime_concerto_payment_my_entries($args=array()) {
  drupal_goto(_spacetime_concerto_payment_my_entries_path());
}


/*
  Construct the path to the my entries page.
*/  
function _spacetime_concerto_payment_my_entries_path($edit = NULL, $arg = NULL) {
  global $user;
  $uid = $user->uid ? $user->uid : 0;
  return 'user/' . $uid . '/entries';
}


/**
 * Implements hook_theme().
 */
function spacetime_concerto_payment_theme() {
  return array(
    'views_view_fields__my_entries' => array(
      'variables' => array('view' => NULL, 'options' => NULL, 'row' => NULL),
      'template' => 'views-view-fields--my-entries',
      'base hook' => 'views_view_fields',
      'path' => drupal_get_path('module', 'spacetime_concerto_payment'),
    ),
    'views_view__my_entries' => array(
      'variables' => array('view' => NULL, 'options' => NULL, 'row' => NULL),
      'template' => 'views-view--my-entries',
      'base hook' => 'views_view',
      'path' => drupal_get_path('module', 'spacetime_concerto_payment'),
    ),    
  );
}


/* Implementation of hook_views_view_fields.
  Add a link to quickly add a new entry.
  */
function spacetime_concerto_payment_preprocess_views_view(&$vars) {
  if ( $vars['name'] == 'my_entries') {
    $vars['header'] .= l("Add new entry", "content/entry-form", array('attributes' => array('class' => 'add-link')));
  }
}


/* Implementation of hook_views_view_fields_preprocessor
  Load the submission and extract certain details.
  */
function spacetime_concerto_payment_preprocess_views_view_fields(&$vars) {
//  kpr($vars);
  global $user;

  if ( $vars['view']->name == 'my_entries') {
    $vars['sid'] = $vars['fields']['sid']->raw;
    $vars['invoice'] = 'U' . $user->uid . '-' . $vars['fields']['sid']->raw;

  //  modules/contrib/webform/includes/webform.submissions.inc:773:    $new_submissions = webform_get_submissions(array('sid' => $sid));
    module_load_include('inc', 'webform', 'includes/webform.submissions');
    $submission = webform_get_submissions(array('sid' => $vars['sid']));
    if ( ! count($submission) ) 
      return;
  //  we're only returning one submission so get that one
    $submission = array_pop($submission);
    $nid = $submission->nid;
    $node = node_load($nid);
  //  a list of components ordered by parent we're interested in.
    $components = array(
      0 => array(
        'entry_contact_name_to_contact_about_this_application', 
        'name_of_concerto', 
        'mobile_phone', 
        'contact_number'
      ),
      'admin_use' => array(
        'payment_complete', 
        'payment_date', 
        'payment_receipt_number', 
      )
    );
    foreach ( $components as $key=>$children ) {
  //  the parent component if there is one
      if ( is_int($key) )
        $pid = $key;
      else
        $pid = webform_get_cid($node, $key, 0);

  //  iterate over the components and create variables for the ones that exist.
      foreach ( $children as $c_name ) {
        $vars[$c_name] = "";
        $cid = webform_get_cid($node, $c_name, $pid);
        if ( ! $cid || ! array_key_exists($cid, $submission->data) )
          continue;

        if ( isset($submission->data[$cid]['value'][0]) ) {
          $vars[$c_name] = $submission->data[$cid]['value'][0];
        }
      }
    }
  //  handle all the fields we need
      $vars['submitted'] = date("j M Y", $vars['fields']['submitted']->raw);
      $vars['title'] = $vars['name_of_concerto'] ? $vars['name_of_concerto'] : "[untitled]";
      $vars['title'] = l($vars['title'], "node/" . $nid . "/submission/" . $vars['sid']);

  //  view edit links
      $vars['view_submission'] = $vars['fields']['view_submission']->content;
      $vars['edit_submission'] = $vars['fields']['edit_submission']->content;
//      $vars['edit_submission'] = l("edit", "node/" . $nid . "/submission/" . $vars['sid'] . "/edit");

      $vars['draft'] = $vars['fields']['is_draft']->raw ? "This is a draft entry. " . l("Please don't forget to submit it.", "node/" . $nid . "/submission/" . $vars['sid'] . "/edit") : "";
    
      $vars['payment_date'] = strtotime ($vars['payment_date']);
      $vars['payment_date'] = date("j M Y", $vars['payment_date']);
    
      $vars['status'] = $vars['payment_complete'] ? t("Paid") . " " . $vars['payment_date'] : null;
      if ( ! $vars['payment_complete'] ) {
        $vars['payment'] = _spacetime_concerto_payment_paypal_button("Entry fee #" . $vars['sid'] . " @" . $user->name, "30.00");
      }
    }
}


function _spacetime_concerto_payment_paypal_button($item_name = 'Entry fee', $amount = '30.00') {

  /* disabled until further notice */
  return "<span class='small'>Payments cannot be accepted at this time. Please check again later.</span>";

  global $user;
  $uid = $user->uid;
  
  $sandbox = FALSE;
  $encrypted = FALSE;
  if ( $sandbox ) {
	  $destinationUrl_ = 'https://www.sandbox.paypal.com/cgi-bin/webscr';
	  $business = 'cnk_1299549188_biz@houseoflaudanum.com';
  } else {
	  $destinationUrl_ = 'https://www.paypal.com/cgi-bin/webscr';    
	  $business = 'spacetimeconcerto@newcastle.edu.au';
  }
  
  $module_path = drupal_get_path('module', 'spacetime_concerto_payment');
  require_once($module_path . "/paypal_php_wps_toolkit/lib/EWPServices.php");
	
	$service = new EWPServices();
	$buttonParams_ = array(
	 'cmd' => '_cart',
	 'business' => $business,
	 'currency_code' => 'AUD',
	 'item_name' => $item_name,
	 'amount' => $amount,
	 'add' => 1,
//	 'email' => $user->email,
	);

  if ( $encrypted ) {
    return _spacetime_concerto_payment_paypal_button_encrypted($buttonParams_, $destinationUrl_, $sandbox);
  } else { 
    return _spacetime_concerto_payment_paypal_button_clear($buttonParams_, $destinationUrl_, $sandbox);
  }
}


/* if we use invoice we can prevent users from adding more than one to the cart */
function _spacetime_concerto_payment_paypal_button_clear($buttonParams_, $destinationUrl_="https://www.paypal.com/cgi-bin/webscr", $sandbox=FALSE) {
  return '
<form name="_xclick" action="https://www.paypal.com/cgi-bin/webscr" method="post">
<input type="hidden" name="cmd" value="' . $buttonParams_['cmd'] . '">
<input type="hidden" name="add" value="' . $buttonParams_['add'] . '">
<input type="hidden" name="business" value="' . $buttonParams_['business'] . '">
<input type="hidden" name="currency_code" value="' . $buttonParams_['currency_code'] . '">
<input type="hidden" name="item_name" value="' . $buttonParams_['item_name'] . '">
<input type="hidden" name="amount" value="' . $buttonParams_['amount'] . '">
<input type="image" src="http://www.paypalobjects.com/en_US/i/btn/x-click-but22.gif" border="0" name="submit" alt="Make payments with PayPal - it\'s fast, free and secure!">
</form>
  ';
}


function _spacetime_concerto_payment_paypal_button_encrypted($buttonParams_, $destinationUrl_="https://www.paypal.com/cgi-bin/webscr", $sandbox=FALSE) {
	$ewpPrivateKeyPwd_ = '';
  if ( $sandbox ) {
	  $paypalCertPath_ = $module_path . '/private/paypal_cert_pem-sandbox';
    $ewpCertPath_ = $module_path . '/private/spacetime-sandbox-pubcert.pem';
    $ewpPrivateKeyPath_ = $module_path . '/private/spacetime-sandbox-prvkey.pem';
    error_log("PAYPAL SANDBOX");
  } else {
    $paypalCertPath_ = $module_path . '/private/paypal_cert_pem';
    $ewpCertPath_ = $module_path . '/private/spacetime-pubcert.pem';
    $ewpPrivateKeyPath_ = $module_path . '/private/spacetime-prvkey.pem';
    error_log("PAYPAL production");
  }
	$destinationUrl_ = $destinationUrl_;
	$buttonImageUrl_ = 'http://www.paypalobjects.com/en_US/i/btn/x-click-but22.gif';
	$payment = $service->encryptButton($buttonParams_,
							$ewpCertPath_,
							$ewpPrivateKeyPath_,
							$ewpPrivateKeyPwd_,
							$paypalCertPath_,
							$destinationUrl_,
							$buttonImageUrl_);

	if ( $payment['status'] )
	  return $payment['encryptedButton'];
	else
	  return FALSE;
}
